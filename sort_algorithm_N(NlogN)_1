# -*- coding: utf-8 -*-
from random import randint
import timeit

def insertsort2(arr):
    for i in range(1,len(arr)):
        postion=i
        currentvalue = arr[i]
        for j in range(i,0,-1):
            if arr[postion-1]>currentvalue:
                arr[postion] = arr[postion-1]
                postion = postion-1
            else:
                break
        arr[postion] = currentvalue

    return arr

####TODO
def mergesort_dp2(arr):
    if(len(arr))>1:
        if(len(arr))<=16:
            arr = insertsort2(arr)
            return arr
        mid = len(arr)//2
        ##
        leftpart = arr[:mid]  # 切片操作为O(K)，会干扰算法性能
        rightpart = arr[mid:]
        leftpart = mergesort_dp2(leftpart)
        rightpart = mergesort_dp2(rightpart)
        if leftpart[-1] <= rightpart[0]:  # 优化1。
            arr = leftpart + rightpart
            return arr
        i,j,k=0,0,0
        while i<len(leftpart) and j<len(rightpart):
            if leftpart[i]<=rightpart[j]:
                arr[k] = leftpart[i]
                i = i+1
            else:
                arr[k] = rightpart[j]
                j = j+1
            k = k+1
        while i<len(leftpart):
            arr[k] = leftpart[i]
            i = i+1
            k = k+1
        while j<len(rightpart):
            arr[k] = rightpart[j]
            j = j+1
            k = k+1
    print('merge array:',arr)
    return arr


max=5000
list=[randint(0,max) for x in range(max)]
alist=list[:]
blist=list[:]

t1=timeit.Timer('insertsort(alist)','from __main__ import insertsort,alist')
print('插入排序: %s s' %t1.timeit(number=1))

t2=timeit.Timer('mergesort_dp2(blist)','from __main__ import mergesort_dp2,blist')
print('归并排序: %s s' % t2.timeit(number=1))


